//
//  StyleKitName.swift
//  Domicilios.com
//
//  Created by Tiago Mergulhão on 09/10/16.
//  Copyright (c) 2016 Tiago Mergulhão. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static let red: UIColor = UIColor(red: 0.812, green: 0.008, blue: 0.008, alpha: 1.000)
        static var imageOfDeliveries: UIImage?
        static var deliveriesTargets: [AnyObject]?
        static var imageOfLocation: UIImage?
        static var locationTargets: [AnyObject]?
        static var imageOfListView: UIImage?
        static var listViewTargets: [AnyObject]?
    }

    //// Colors

    public class var red: UIColor { return Cache.red }

    //// Drawing Methods

    public class func drawDeliveries() {

        //// path0_fill Drawing
        let path0_fillPath = UIBezierPath()
        path0_fillPath.moveToPoint(CGPointMake(16.97, 6))
        path0_fillPath.addCurveToPoint(CGPointMake(17, 5.66), controlPoint1: CGPointMake(16.99, 5.89), controlPoint2: CGPointMake(17, 5.77))
        path0_fillPath.addCurveToPoint(CGPointMake(14, 3), controlPoint1: CGPointMake(17, 4.19), controlPoint2: CGPointMake(15.66, 3))
        path0_fillPath.addCurveToPoint(CGPointMake(11, 5.66), controlPoint1: CGPointMake(12.34, 3), controlPoint2: CGPointMake(11, 4.19))
        path0_fillPath.addCurveToPoint(CGPointMake(11.02, 6), controlPoint1: CGPointMake(11, 5.77), controlPoint2: CGPointMake(11.01, 5.89))
        path0_fillPath.addCurveToPoint(CGPointMake(14, 5.85), controlPoint1: CGPointMake(11.94, 5.9), controlPoint2: CGPointMake(12.94, 5.85))
        path0_fillPath.addCurveToPoint(CGPointMake(16.97, 6), controlPoint1: CGPointMake(15.06, 5.85), controlPoint2: CGPointMake(16.05, 5.9))
        path0_fillPath.closePath()
        path0_fillPath.moveToPoint(CGPointMake(24.24, 18.85))
        path0_fillPath.addCurveToPoint(CGPointMake(25.96, 21.8), controlPoint1: CGPointMake(26.43, 20.22), controlPoint2: CGPointMake(25.96, 21.8))
        path0_fillPath.addCurveToPoint(CGPointMake(13.4, 24), controlPoint1: CGPointMake(25.96, 21.8), controlPoint2: CGPointMake(21.02, 24))
        path0_fillPath.addCurveToPoint(CGPointMake(2.04, 21.8), controlPoint1: CGPointMake(5.79, 24), controlPoint2: CGPointMake(2.04, 21.8))
        path0_fillPath.addCurveToPoint(CGPointMake(3.76, 18.85), controlPoint1: CGPointMake(2.04, 21.8), controlPoint2: CGPointMake(1.57, 20.22))
        path0_fillPath.addCurveToPoint(CGPointMake(14, 21.03), controlPoint1: CGPointMake(6.57, 20.21), controlPoint2: CGPointMake(10.13, 21.03))
        path0_fillPath.addCurveToPoint(CGPointMake(24.24, 18.85), controlPoint1: CGPointMake(17.87, 21.03), controlPoint2: CGPointMake(21.43, 20.21))
        path0_fillPath.closePath()
        path0_fillPath.moveToPoint(CGPointMake(23.45, 16.18))
        path0_fillPath.addCurveToPoint(CGPointMake(23.45, 16.51), controlPoint1: CGPointMake(23.45, 16.29), controlPoint2: CGPointMake(23.45, 16.4))
        path0_fillPath.addCurveToPoint(CGPointMake(13.89, 18.73), controlPoint1: CGPointMake(21.01, 17.88), controlPoint2: CGPointMake(17.63, 18.73))
        path0_fillPath.addCurveToPoint(CGPointMake(4.56, 16.62), controlPoint1: CGPointMake(10.27, 18.73), controlPoint2: CGPointMake(6.97, 17.93))
        path0_fillPath.addCurveToPoint(CGPointMake(4.55, 16.18), controlPoint1: CGPointMake(4.55, 16.48), controlPoint2: CGPointMake(4.55, 16.33))
        path0_fillPath.addCurveToPoint(CGPointMake(14, 6.84), controlPoint1: CGPointMake(4.55, 11.02), controlPoint2: CGPointMake(8.78, 6.84))
        path0_fillPath.addCurveToPoint(CGPointMake(23.45, 16.18), controlPoint1: CGPointMake(19.22, 6.84), controlPoint2: CGPointMake(23.45, 11.02))
        path0_fillPath.closePath()
        path0_fillPath.miterLimit = 4;

        path0_fillPath.usesEvenOddFillRule = true;

        UIColor.whiteColor().setFill()
        path0_fillPath.fill()
    }

    public class func drawLocation() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(13, 25))
        bezierPath.addLineToPoint(CGPointMake(13, 14))
        bezierPath.addLineToPoint(CGPointMake(2, 14))
        bezierPath.addLineToPoint(CGPointMake(24, 3))
        bezierPath.addLineToPoint(CGPointMake(13, 25))
        bezierPath.closePath()
        UIColor.whiteColor().setFill()
        bezierPath.fill()
    }

    public class func drawListView() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(4, 7, 3, 3))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(4, 13, 3, 3))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRectMake(4, 19, 3, 3))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(9, 8, 15, 1))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(9, 14, 15, 1))
        UIColor.whiteColor().setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRectMake(9, 20, 15, 1))
        UIColor.whiteColor().setFill()
        rectangle6Path.fill()
    }

    //// Generated Images

    public class var imageOfDeliveries: UIImage {
        if Cache.imageOfDeliveries != nil {
            return Cache.imageOfDeliveries!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            StyleKitName.drawDeliveries()

        Cache.imageOfDeliveries = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfDeliveries!
    }

    public class var imageOfLocation: UIImage {
        if Cache.imageOfLocation != nil {
            return Cache.imageOfLocation!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            StyleKitName.drawLocation()

        Cache.imageOfLocation = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfLocation!
    }

    public class var imageOfListView: UIImage {
        if Cache.imageOfListView != nil {
            return Cache.imageOfListView!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), false, 0)
            StyleKitName.drawListView()

        Cache.imageOfListView = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfListView!
    }

    //// Customization Infrastructure

    @IBOutlet var deliveriesTargets: [AnyObject]! {
        get { return Cache.deliveriesTargets }
        set {
            Cache.deliveriesTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: StyleKitName.imageOfDeliveries)
            }
        }
    }

    @IBOutlet var locationTargets: [AnyObject]! {
        get { return Cache.locationTargets }
        set {
            Cache.locationTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: StyleKitName.imageOfLocation)
            }
        }
    }

    @IBOutlet var listViewTargets: [AnyObject]! {
        get { return Cache.listViewTargets }
        set {
            Cache.listViewTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: StyleKitName.imageOfListView)
            }
        }
    }

}
