//
//  StyleKit.m
//  Domicilios.com
//
//  Created by Tiago Mergulhão on 13/10/16.
//  Copyright (c) 2016 Tiago Mergulhão. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static UIColor* _red = nil;

static UIImage* _imageOfDeliveries = nil;
static UIImage* _imageOfLocation = nil;
static UIImage* _imageOfListView = nil;
static UIImage* _imageOfMapPlaceholder = nil;
static UIImage* _imageOfCloseImageDialog = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _red = [UIColor colorWithRed: 0.812 green: 0.008 blue: 0.008 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)red { return _red; }

#pragma mark Drawing Methods

+ (void)drawDeliveries
{

    //// path0_fill Drawing
    UIBezierPath* path0_fillPath = [UIBezierPath bezierPath];
    [path0_fillPath moveToPoint: CGPointMake(16.97, 6)];
    [path0_fillPath addCurveToPoint: CGPointMake(17, 5.66) controlPoint1: CGPointMake(16.99, 5.89) controlPoint2: CGPointMake(17, 5.77)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 3) controlPoint1: CGPointMake(17, 4.19) controlPoint2: CGPointMake(15.66, 3)];
    [path0_fillPath addCurveToPoint: CGPointMake(11, 5.66) controlPoint1: CGPointMake(12.34, 3) controlPoint2: CGPointMake(11, 4.19)];
    [path0_fillPath addCurveToPoint: CGPointMake(11.02, 6) controlPoint1: CGPointMake(11, 5.77) controlPoint2: CGPointMake(11.01, 5.89)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 5.85) controlPoint1: CGPointMake(11.94, 5.9) controlPoint2: CGPointMake(12.94, 5.85)];
    [path0_fillPath addCurveToPoint: CGPointMake(16.97, 6) controlPoint1: CGPointMake(15.06, 5.85) controlPoint2: CGPointMake(16.05, 5.9)];
    [path0_fillPath closePath];
    [path0_fillPath moveToPoint: CGPointMake(24.24, 19.85)];
    [path0_fillPath addCurveToPoint: CGPointMake(25.96, 22.8) controlPoint1: CGPointMake(26.43, 21.22) controlPoint2: CGPointMake(25.96, 22.8)];
    [path0_fillPath addCurveToPoint: CGPointMake(13.4, 25) controlPoint1: CGPointMake(25.96, 22.8) controlPoint2: CGPointMake(21.02, 25)];
    [path0_fillPath addCurveToPoint: CGPointMake(2.04, 22.8) controlPoint1: CGPointMake(5.79, 25) controlPoint2: CGPointMake(2.04, 22.8)];
    [path0_fillPath addCurveToPoint: CGPointMake(3.76, 19.85) controlPoint1: CGPointMake(2.04, 22.8) controlPoint2: CGPointMake(1.57, 21.22)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 22.03) controlPoint1: CGPointMake(6.57, 21.21) controlPoint2: CGPointMake(10.13, 22.03)];
    [path0_fillPath addCurveToPoint: CGPointMake(24.24, 19.85) controlPoint1: CGPointMake(17.87, 22.03) controlPoint2: CGPointMake(21.43, 21.21)];
    [path0_fillPath closePath];
    [path0_fillPath moveToPoint: CGPointMake(23.45, 17.18)];
    [path0_fillPath addCurveToPoint: CGPointMake(23.45, 17.51) controlPoint1: CGPointMake(23.45, 17.29) controlPoint2: CGPointMake(23.45, 17.4)];
    [path0_fillPath addCurveToPoint: CGPointMake(13.89, 19.73) controlPoint1: CGPointMake(21.01, 18.88) controlPoint2: CGPointMake(17.63, 19.73)];
    [path0_fillPath addCurveToPoint: CGPointMake(4.56, 17.62) controlPoint1: CGPointMake(10.27, 19.73) controlPoint2: CGPointMake(6.97, 18.93)];
    [path0_fillPath addCurveToPoint: CGPointMake(4.55, 17.18) controlPoint1: CGPointMake(4.55, 17.48) controlPoint2: CGPointMake(4.55, 17.33)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 7.84) controlPoint1: CGPointMake(4.55, 12.02) controlPoint2: CGPointMake(8.78, 7.84)];
    [path0_fillPath addCurveToPoint: CGPointMake(23.45, 17.18) controlPoint1: CGPointMake(19.22, 7.84) controlPoint2: CGPointMake(23.45, 12.02)];
    [path0_fillPath closePath];
    path0_fillPath.miterLimit = 4;

    path0_fillPath.usesEvenOddFillRule = YES;

    [UIColor.whiteColor setFill];
    [path0_fillPath fill];
}

+ (void)drawLocation
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(13, 25)];
    [bezierPath addLineToPoint: CGPointMake(13, 14)];
    [bezierPath addLineToPoint: CGPointMake(2, 14)];
    [bezierPath addLineToPoint: CGPointMake(24, 3)];
    [bezierPath addLineToPoint: CGPointMake(13, 25)];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
}

+ (void)drawListView
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(4, 7, 3, 3)];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(4, 13, 3, 3)];
    [UIColor.whiteColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(4, 19, 3, 3)];
    [UIColor.whiteColor setFill];
    [rectangle3Path fill];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 8, 15, 1)];
    [UIColor.whiteColor setFill];
    [rectangle4Path fill];


    //// Rectangle 5 Drawing
    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 14, 15, 1)];
    [UIColor.whiteColor setFill];
    [rectangle5Path fill];


    //// Rectangle 6 Drawing
    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 20, 15, 1)];
    [UIColor.whiteColor setFill];
    [rectangle6Path fill];
}

+ (void)drawMapPlaceholder
{

    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1, 1, 38, 38)];
    [StyleKit.red setStroke];
    oval2Path.lineWidth = 2;
    [oval2Path stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(4, 4, 32, 32)];
    [StyleKit.red setFill];
    [ovalPath fill];


    //// path0_fill Drawing
    UIBezierPath* path0_fillPath = [UIBezierPath bezierPath];
    [path0_fillPath moveToPoint: CGPointMake(22.97, 11)];
    [path0_fillPath addCurveToPoint: CGPointMake(23, 10.66) controlPoint1: CGPointMake(22.99, 10.89) controlPoint2: CGPointMake(23, 10.77)];
    [path0_fillPath addCurveToPoint: CGPointMake(20, 8) controlPoint1: CGPointMake(23, 9.19) controlPoint2: CGPointMake(21.66, 8)];
    [path0_fillPath addCurveToPoint: CGPointMake(17, 10.66) controlPoint1: CGPointMake(18.34, 8) controlPoint2: CGPointMake(17, 9.19)];
    [path0_fillPath addCurveToPoint: CGPointMake(17.02, 11) controlPoint1: CGPointMake(17, 10.77) controlPoint2: CGPointMake(17.01, 10.89)];
    [path0_fillPath addCurveToPoint: CGPointMake(20, 10.85) controlPoint1: CGPointMake(17.94, 10.9) controlPoint2: CGPointMake(18.94, 10.85)];
    [path0_fillPath addCurveToPoint: CGPointMake(22.97, 11) controlPoint1: CGPointMake(21.06, 10.85) controlPoint2: CGPointMake(22.05, 10.9)];
    [path0_fillPath closePath];
    [path0_fillPath moveToPoint: CGPointMake(30.24, 24.85)];
    [path0_fillPath addCurveToPoint: CGPointMake(31.96, 27.8) controlPoint1: CGPointMake(32.43, 26.22) controlPoint2: CGPointMake(31.96, 27.8)];
    [path0_fillPath addCurveToPoint: CGPointMake(19.4, 30) controlPoint1: CGPointMake(31.96, 27.8) controlPoint2: CGPointMake(27.02, 30)];
    [path0_fillPath addCurveToPoint: CGPointMake(8.04, 27.8) controlPoint1: CGPointMake(11.79, 30) controlPoint2: CGPointMake(8.04, 27.8)];
    [path0_fillPath addCurveToPoint: CGPointMake(9.76, 24.85) controlPoint1: CGPointMake(8.04, 27.8) controlPoint2: CGPointMake(7.57, 26.22)];
    [path0_fillPath addCurveToPoint: CGPointMake(20, 27.03) controlPoint1: CGPointMake(12.57, 26.21) controlPoint2: CGPointMake(16.13, 27.03)];
    [path0_fillPath addCurveToPoint: CGPointMake(30.24, 24.85) controlPoint1: CGPointMake(23.87, 27.03) controlPoint2: CGPointMake(27.43, 26.21)];
    [path0_fillPath closePath];
    [path0_fillPath moveToPoint: CGPointMake(29.45, 22.18)];
    [path0_fillPath addCurveToPoint: CGPointMake(29.45, 22.51) controlPoint1: CGPointMake(29.45, 22.29) controlPoint2: CGPointMake(29.45, 22.4)];
    [path0_fillPath addCurveToPoint: CGPointMake(19.89, 24.73) controlPoint1: CGPointMake(27.01, 23.88) controlPoint2: CGPointMake(23.63, 24.73)];
    [path0_fillPath addCurveToPoint: CGPointMake(10.56, 22.62) controlPoint1: CGPointMake(16.27, 24.73) controlPoint2: CGPointMake(12.97, 23.93)];
    [path0_fillPath addCurveToPoint: CGPointMake(10.55, 22.18) controlPoint1: CGPointMake(10.55, 22.48) controlPoint2: CGPointMake(10.55, 22.33)];
    [path0_fillPath addCurveToPoint: CGPointMake(20, 12.84) controlPoint1: CGPointMake(10.55, 17.02) controlPoint2: CGPointMake(14.78, 12.84)];
    [path0_fillPath addCurveToPoint: CGPointMake(29.45, 22.18) controlPoint1: CGPointMake(25.22, 12.84) controlPoint2: CGPointMake(29.45, 17.02)];
    [path0_fillPath closePath];
    path0_fillPath.miterLimit = 4;

    path0_fillPath.usesEvenOddFillRule = YES;

    [UIColor.whiteColor setFill];
    [path0_fillPath fill];
}

+ (void)drawTimeFilterWithTimeSortActive: (BOOL)timeSortActive time: (CGFloat)time
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* clear = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];

    //// Variable Declarations
    UIColor* timeBgCanvasColor = !timeSortActive ? clear : white;
    UIColor* timeElementsColor = !timeSortActive ? white : StyleKit.red;
    NSString* timeString = [[NSString stringWithFormat: @"%ld", (long)round(time)] stringByAppendingString: @" min"];
    CGFloat timeAngle = -(6 * time) + 90 > -270 ? -(6 * time) + 90 : -270;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 108, 34) cornerRadius: 10];
    [timeBgCanvasColor setFill];
    [rectanglePath fill];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(17, 27.5)];
    [bezier2Path addCurveToPoint: CGPointMake(27.5, 17) controlPoint1: CGPointMake(22.8, 27.5) controlPoint2: CGPointMake(27.5, 22.8)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 6.5) controlPoint1: CGPointMake(27.5, 11.2) controlPoint2: CGPointMake(22.8, 6.5)];
    [bezier2Path addCurveToPoint: CGPointMake(6.5, 17) controlPoint1: CGPointMake(11.2, 6.5) controlPoint2: CGPointMake(6.5, 11.2)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 27.5) controlPoint1: CGPointMake(6.5, 22.8) controlPoint2: CGPointMake(11.2, 27.5)];
    [bezier2Path addLineToPoint: CGPointMake(17, 27.5)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(17, 29)];
    [bezier2Path addCurveToPoint: CGPointMake(29, 17) controlPoint1: CGPointMake(23.63, 29) controlPoint2: CGPointMake(29, 23.63)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 5) controlPoint1: CGPointMake(29, 10.37) controlPoint2: CGPointMake(23.63, 5)];
    [bezier2Path addCurveToPoint: CGPointMake(5, 17) controlPoint1: CGPointMake(10.37, 5) controlPoint2: CGPointMake(5, 10.37)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 29) controlPoint1: CGPointMake(5, 23.63) controlPoint2: CGPointMake(10.37, 29)];
    [bezier2Path addLineToPoint: CGPointMake(17, 29)];
    [bezier2Path closePath];
    bezier2Path.usesEvenOddFillRule = YES;

    [timeElementsColor setFill];
    [bezier2Path fill];


    //// Clip 2 Drawing
    CGRect clip2Rect = CGRectMake(9, 9, 16, 16);
    UIBezierPath* clip2Path = [UIBezierPath bezierPath];
    [clip2Path addArcWithCenter: CGPointMake(CGRectGetMidX(clip2Rect), CGRectGetMidY(clip2Rect)) radius: CGRectGetWidth(clip2Rect) / 2 startAngle: -90 * M_PI/180 endAngle: -timeAngle * M_PI/180 clockwise: YES];
    [clip2Path addLineToPoint: CGPointMake(CGRectGetMidX(clip2Rect), CGRectGetMidY(clip2Rect))];
    [clip2Path closePath];

    [timeElementsColor setFill];
    [clip2Path fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(36, 6, 72, 21);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue" size: 18], NSForegroundColorAttributeName: timeElementsColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [timeString boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [timeString drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawPriceFilterWithPriceSortActive: (BOOL)priceSortActive price: (CGFloat)price
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* clear = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];

    //// Variable Declarations
    UIColor* priceBgCanvasColor = !priceSortActive ? clear : white;
    UIColor* priceElementsColor = !priceSortActive ? white : StyleKit.red;
    NSString* priceString = [@"$" stringByAppendingFormat: @"%ld", (NSInteger)round(price)];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 108, 34) cornerRadius: 10];
    [priceBgCanvasColor setFill];
    [rectanglePath fill];


    //// Bezier 11 Drawing
    UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
    [bezier11Path moveToPoint: CGPointMake(18.57, 9.42)];
    [bezier11Path addLineToPoint: CGPointMake(6.46, 9.42)];
    [bezier11Path addLineToPoint: CGPointMake(6.46, 21.47)];
    [bezier11Path addLineToPoint: CGPointMake(7.65, 21.47)];
    [bezier11Path addCurveToPoint: CGPointMake(10.7, 19.41) controlPoint1: CGPointMake(8.13, 20.26) controlPoint2: CGPointMake(9.32, 19.41)];
    [bezier11Path addCurveToPoint: CGPointMake(13.74, 21.47) controlPoint1: CGPointMake(12.08, 19.41) controlPoint2: CGPointMake(13.26, 20.26)];
    [bezier11Path addLineToPoint: CGPointMake(17.95, 21.47)];
    [bezier11Path addCurveToPoint: CGPointMake(18.57, 20.48) controlPoint1: CGPointMake(18.1, 21.1) controlPoint2: CGPointMake(18.31, 20.77)];
    [bezier11Path addLineToPoint: CGPointMake(18.57, 9.42)];
    [bezier11Path addLineToPoint: CGPointMake(18.57, 9.42)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(24.04, 21.47)];
    [bezier11Path addCurveToPoint: CGPointMake(21, 19.41) controlPoint1: CGPointMake(23.56, 20.26) controlPoint2: CGPointMake(22.38, 19.41)];
    [bezier11Path addCurveToPoint: CGPointMake(19.79, 19.64) controlPoint1: CGPointMake(20.57, 19.41) controlPoint2: CGPointMake(20.16, 19.49)];
    [bezier11Path addLineToPoint: CGPointMake(19.79, 11.83)];
    [bezier11Path addLineToPoint: CGPointMake(24.63, 11.83)];
    [bezier11Path addLineToPoint: CGPointMake(28.27, 16.65)];
    [bezier11Path addLineToPoint: CGPointMake(28.27, 21.47)];
    [bezier11Path addLineToPoint: CGPointMake(24.04, 21.47)];
    [bezier11Path addLineToPoint: CGPointMake(24.04, 21.47)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(22.21, 13.04)];
    [bezier11Path addLineToPoint: CGPointMake(22.21, 16.65)];
    [bezier11Path addLineToPoint: CGPointMake(25.84, 16.65)];
    [bezier11Path addLineToPoint: CGPointMake(23.42, 13.04)];
    [bezier11Path addLineToPoint: CGPointMake(22.21, 13.04)];
    [bezier11Path addLineToPoint: CGPointMake(22.21, 13.04)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(13.12, 22.67)];
    [bezier11Path addCurveToPoint: CGPointMake(10.7, 25.08) controlPoint1: CGPointMake(13.12, 24) controlPoint2: CGPointMake(12.04, 25.08)];
    [bezier11Path addCurveToPoint: CGPointMake(8.27, 22.67) controlPoint1: CGPointMake(9.36, 25.08) controlPoint2: CGPointMake(8.27, 24)];
    [bezier11Path addCurveToPoint: CGPointMake(10.7, 20.26) controlPoint1: CGPointMake(8.27, 21.34) controlPoint2: CGPointMake(9.36, 20.26)];
    [bezier11Path addCurveToPoint: CGPointMake(13.12, 22.67) controlPoint1: CGPointMake(12.04, 20.26) controlPoint2: CGPointMake(13.12, 21.34)];
    [bezier11Path addLineToPoint: CGPointMake(13.12, 22.67)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(21, 25.08)];
    [bezier11Path addCurveToPoint: CGPointMake(23.42, 22.67) controlPoint1: CGPointMake(22.34, 25.08) controlPoint2: CGPointMake(23.42, 24)];
    [bezier11Path addCurveToPoint: CGPointMake(21, 20.26) controlPoint1: CGPointMake(23.42, 21.34) controlPoint2: CGPointMake(22.34, 20.26)];
    [bezier11Path addCurveToPoint: CGPointMake(18.57, 22.67) controlPoint1: CGPointMake(19.66, 20.26) controlPoint2: CGPointMake(18.57, 21.34)];
    [bezier11Path addCurveToPoint: CGPointMake(21, 25.08) controlPoint1: CGPointMake(18.57, 24) controlPoint2: CGPointMake(19.66, 25.08)];
    [bezier11Path addLineToPoint: CGPointMake(21, 25.08)];
    [bezier11Path closePath];
    bezier11Path.usesEvenOddFillRule = YES;

    [priceElementsColor setFill];
    [bezier11Path fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(36, 6, 72, 21);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue" size: 18], NSForegroundColorAttributeName: priceElementsColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [priceString boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [priceString drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawRatingFilterWithRatingSortActive: (BOOL)ratingSortActive rating: (CGFloat)rating
{
    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* clear = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];

    //// Variable Declarations
    UIColor* ratingBgCanvasColor = !ratingSortActive ? clear : white;
    UIColor* ratingStar1Color = ratingSortActive ? (rating >= 1 ? StyleKit.red : clear) : (rating >= 1 ? white : clear);
    UIColor* ratingStar2Color = ratingSortActive ? (rating >= 2 ? StyleKit.red : clear) : (rating >= 2 ? white : clear);
    UIColor* ratingStar3Color = ratingSortActive ? (rating >= 3 ? StyleKit.red : clear) : (rating >= 3 ? white : clear);
    UIColor* ratingStar4Color = ratingSortActive ? (rating >= 4 ? StyleKit.red : clear) : (rating >= 4 ? white : clear);
    UIColor* ratingStar5Color = ratingSortActive ? (rating >= 5 ? StyleKit.red : clear) : (rating >= 5 ? white : clear);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 130, 34) cornerRadius: 10];
    [ratingBgCanvasColor setFill];
    [rectanglePath fill];


    //// star1 Drawing
    UIBezierPath* star1Path = [UIBezierPath bezierPath];
    [star1Path moveToPoint: CGPointMake(17.36, 13.64)];
    [star1Path addLineToPoint: CGPointMake(25, 13.64)];
    [star1Path addLineToPoint: CGPointMake(18.82, 18.36)];
    [star1Path addLineToPoint: CGPointMake(21.18, 26)];
    [star1Path addLineToPoint: CGPointMake(15, 21.28)];
    [star1Path addLineToPoint: CGPointMake(8.82, 26)];
    [star1Path addLineToPoint: CGPointMake(11.18, 18.36)];
    [star1Path addLineToPoint: CGPointMake(5, 13.64)];
    [star1Path addLineToPoint: CGPointMake(12.64, 13.64)];
    [star1Path addLineToPoint: CGPointMake(15, 6)];
    [star1Path addLineToPoint: CGPointMake(17.36, 13.64)];
    [star1Path closePath];
    star1Path.usesEvenOddFillRule = YES;

    [ratingStar1Color setFill];
    [star1Path fill];


    //// star2 Drawing
    UIBezierPath* star2Path = [UIBezierPath bezierPath];
    [star2Path moveToPoint: CGPointMake(42.36, 13.64)];
    [star2Path addLineToPoint: CGPointMake(50, 13.64)];
    [star2Path addLineToPoint: CGPointMake(43.82, 18.36)];
    [star2Path addLineToPoint: CGPointMake(46.18, 26)];
    [star2Path addLineToPoint: CGPointMake(40, 21.28)];
    [star2Path addLineToPoint: CGPointMake(33.82, 26)];
    [star2Path addLineToPoint: CGPointMake(36.18, 18.36)];
    [star2Path addLineToPoint: CGPointMake(30, 13.64)];
    [star2Path addLineToPoint: CGPointMake(37.64, 13.64)];
    [star2Path addLineToPoint: CGPointMake(40, 6)];
    [star2Path addLineToPoint: CGPointMake(42.36, 13.64)];
    [star2Path closePath];
    star2Path.usesEvenOddFillRule = YES;

    [ratingStar2Color setFill];
    [star2Path fill];


    //// star3 Drawing
    UIBezierPath* star3Path = [UIBezierPath bezierPath];
    [star3Path moveToPoint: CGPointMake(67.36, 13.64)];
    [star3Path addLineToPoint: CGPointMake(75, 13.64)];
    [star3Path addLineToPoint: CGPointMake(68.82, 18.36)];
    [star3Path addLineToPoint: CGPointMake(71.18, 26)];
    [star3Path addLineToPoint: CGPointMake(65, 21.28)];
    [star3Path addLineToPoint: CGPointMake(58.82, 26)];
    [star3Path addLineToPoint: CGPointMake(61.18, 18.36)];
    [star3Path addLineToPoint: CGPointMake(55, 13.64)];
    [star3Path addLineToPoint: CGPointMake(62.64, 13.64)];
    [star3Path addLineToPoint: CGPointMake(65, 6)];
    [star3Path addLineToPoint: CGPointMake(67.36, 13.64)];
    [star3Path closePath];
    star3Path.usesEvenOddFillRule = YES;

    [ratingStar3Color setFill];
    [star3Path fill];


    //// star4 Drawing
    UIBezierPath* star4Path = [UIBezierPath bezierPath];
    [star4Path moveToPoint: CGPointMake(92.36, 13.64)];
    [star4Path addLineToPoint: CGPointMake(100, 13.64)];
    [star4Path addLineToPoint: CGPointMake(93.82, 18.36)];
    [star4Path addLineToPoint: CGPointMake(96.18, 26)];
    [star4Path addLineToPoint: CGPointMake(90, 21.28)];
    [star4Path addLineToPoint: CGPointMake(83.82, 26)];
    [star4Path addLineToPoint: CGPointMake(86.18, 18.36)];
    [star4Path addLineToPoint: CGPointMake(80, 13.64)];
    [star4Path addLineToPoint: CGPointMake(87.64, 13.64)];
    [star4Path addLineToPoint: CGPointMake(90, 6)];
    [star4Path addLineToPoint: CGPointMake(92.36, 13.64)];
    [star4Path closePath];
    star4Path.usesEvenOddFillRule = YES;

    [ratingStar4Color setFill];
    [star4Path fill];


    //// star5 Drawing
    UIBezierPath* star5Path = [UIBezierPath bezierPath];
    [star5Path moveToPoint: CGPointMake(117.36, 13.64)];
    [star5Path addLineToPoint: CGPointMake(125, 13.64)];
    [star5Path addLineToPoint: CGPointMake(118.82, 18.36)];
    [star5Path addLineToPoint: CGPointMake(121.18, 26)];
    [star5Path addLineToPoint: CGPointMake(115, 21.28)];
    [star5Path addLineToPoint: CGPointMake(108.82, 26)];
    [star5Path addLineToPoint: CGPointMake(111.18, 18.36)];
    [star5Path addLineToPoint: CGPointMake(105, 13.64)];
    [star5Path addLineToPoint: CGPointMake(112.64, 13.64)];
    [star5Path addLineToPoint: CGPointMake(115, 6)];
    [star5Path addLineToPoint: CGPointMake(117.36, 13.64)];
    [star5Path closePath];
    star5Path.usesEvenOddFillRule = YES;

    [ratingStar5Color setFill];
    [star5Path fill];
}

+ (void)drawTimeTagWithTimeSortActive: (BOOL)timeSortActive time: (CGFloat)time
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    UIColor* timeElementsColor = !timeSortActive ? white : StyleKit.red;
    NSString* timeString = [[NSString stringWithFormat: @"%ld", (long)round(time)] stringByAppendingString: @" min"];
    CGFloat timeAngle = -(6 * time) + 90 > -270 ? -(6 * time) + 90 : -270;

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(17, 27.5)];
    [bezier2Path addCurveToPoint: CGPointMake(27.5, 17) controlPoint1: CGPointMake(22.8, 27.5) controlPoint2: CGPointMake(27.5, 22.8)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 6.5) controlPoint1: CGPointMake(27.5, 11.2) controlPoint2: CGPointMake(22.8, 6.5)];
    [bezier2Path addCurveToPoint: CGPointMake(6.5, 17) controlPoint1: CGPointMake(11.2, 6.5) controlPoint2: CGPointMake(6.5, 11.2)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 27.5) controlPoint1: CGPointMake(6.5, 22.8) controlPoint2: CGPointMake(11.2, 27.5)];
    [bezier2Path addLineToPoint: CGPointMake(17, 27.5)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(17, 29)];
    [bezier2Path addCurveToPoint: CGPointMake(29, 17) controlPoint1: CGPointMake(23.63, 29) controlPoint2: CGPointMake(29, 23.63)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 5) controlPoint1: CGPointMake(29, 10.37) controlPoint2: CGPointMake(23.63, 5)];
    [bezier2Path addCurveToPoint: CGPointMake(5, 17) controlPoint1: CGPointMake(10.37, 5) controlPoint2: CGPointMake(5, 10.37)];
    [bezier2Path addCurveToPoint: CGPointMake(17, 29) controlPoint1: CGPointMake(5, 23.63) controlPoint2: CGPointMake(10.37, 29)];
    [bezier2Path addLineToPoint: CGPointMake(17, 29)];
    [bezier2Path closePath];
    bezier2Path.usesEvenOddFillRule = YES;

    [timeElementsColor setFill];
    [bezier2Path fill];


    //// Clip 2 Drawing
    CGRect clip2Rect = CGRectMake(9, 9, 16, 16);
    UIBezierPath* clip2Path = [UIBezierPath bezierPath];
    [clip2Path addArcWithCenter: CGPointMake(CGRectGetMidX(clip2Rect), CGRectGetMidY(clip2Rect)) radius: CGRectGetWidth(clip2Rect) / 2 startAngle: -90 * M_PI/180 endAngle: -timeAngle * M_PI/180 clockwise: YES];
    [clip2Path addLineToPoint: CGPointMake(CGRectGetMidX(clip2Rect), CGRectGetMidY(clip2Rect))];
    [clip2Path closePath];

    [timeElementsColor setFill];
    [clip2Path fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(36, 6, 72, 21);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue" size: 18], NSForegroundColorAttributeName: timeElementsColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [timeString boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [timeString drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawPriceTagWithPriceSortActive: (BOOL)priceSortActive price: (CGFloat)price
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    UIColor* priceElementsColor = !priceSortActive ? white : StyleKit.red;
    NSString* priceString = [@"$" stringByAppendingFormat: @"%ld", (NSInteger)round(price)];

    //// Bezier 11 Drawing
    UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
    [bezier11Path moveToPoint: CGPointMake(18.57, 9.42)];
    [bezier11Path addLineToPoint: CGPointMake(6.46, 9.42)];
    [bezier11Path addLineToPoint: CGPointMake(6.46, 21.47)];
    [bezier11Path addLineToPoint: CGPointMake(7.65, 21.47)];
    [bezier11Path addCurveToPoint: CGPointMake(10.7, 19.41) controlPoint1: CGPointMake(8.13, 20.26) controlPoint2: CGPointMake(9.32, 19.41)];
    [bezier11Path addCurveToPoint: CGPointMake(13.74, 21.47) controlPoint1: CGPointMake(12.08, 19.41) controlPoint2: CGPointMake(13.26, 20.26)];
    [bezier11Path addLineToPoint: CGPointMake(17.95, 21.47)];
    [bezier11Path addCurveToPoint: CGPointMake(18.57, 20.48) controlPoint1: CGPointMake(18.1, 21.1) controlPoint2: CGPointMake(18.31, 20.77)];
    [bezier11Path addLineToPoint: CGPointMake(18.57, 9.42)];
    [bezier11Path addLineToPoint: CGPointMake(18.57, 9.42)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(24.04, 21.47)];
    [bezier11Path addCurveToPoint: CGPointMake(21, 19.41) controlPoint1: CGPointMake(23.56, 20.26) controlPoint2: CGPointMake(22.38, 19.41)];
    [bezier11Path addCurveToPoint: CGPointMake(19.79, 19.64) controlPoint1: CGPointMake(20.57, 19.41) controlPoint2: CGPointMake(20.16, 19.49)];
    [bezier11Path addLineToPoint: CGPointMake(19.79, 11.83)];
    [bezier11Path addLineToPoint: CGPointMake(24.63, 11.83)];
    [bezier11Path addLineToPoint: CGPointMake(28.27, 16.65)];
    [bezier11Path addLineToPoint: CGPointMake(28.27, 21.47)];
    [bezier11Path addLineToPoint: CGPointMake(24.04, 21.47)];
    [bezier11Path addLineToPoint: CGPointMake(24.04, 21.47)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(22.21, 13.04)];
    [bezier11Path addLineToPoint: CGPointMake(22.21, 16.65)];
    [bezier11Path addLineToPoint: CGPointMake(25.84, 16.65)];
    [bezier11Path addLineToPoint: CGPointMake(23.42, 13.04)];
    [bezier11Path addLineToPoint: CGPointMake(22.21, 13.04)];
    [bezier11Path addLineToPoint: CGPointMake(22.21, 13.04)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(13.12, 22.67)];
    [bezier11Path addCurveToPoint: CGPointMake(10.7, 25.08) controlPoint1: CGPointMake(13.12, 24) controlPoint2: CGPointMake(12.04, 25.08)];
    [bezier11Path addCurveToPoint: CGPointMake(8.27, 22.67) controlPoint1: CGPointMake(9.36, 25.08) controlPoint2: CGPointMake(8.27, 24)];
    [bezier11Path addCurveToPoint: CGPointMake(10.7, 20.26) controlPoint1: CGPointMake(8.27, 21.34) controlPoint2: CGPointMake(9.36, 20.26)];
    [bezier11Path addCurveToPoint: CGPointMake(13.12, 22.67) controlPoint1: CGPointMake(12.04, 20.26) controlPoint2: CGPointMake(13.12, 21.34)];
    [bezier11Path addLineToPoint: CGPointMake(13.12, 22.67)];
    [bezier11Path closePath];
    [bezier11Path moveToPoint: CGPointMake(21, 25.08)];
    [bezier11Path addCurveToPoint: CGPointMake(23.42, 22.67) controlPoint1: CGPointMake(22.34, 25.08) controlPoint2: CGPointMake(23.42, 24)];
    [bezier11Path addCurveToPoint: CGPointMake(21, 20.26) controlPoint1: CGPointMake(23.42, 21.34) controlPoint2: CGPointMake(22.34, 20.26)];
    [bezier11Path addCurveToPoint: CGPointMake(18.57, 22.67) controlPoint1: CGPointMake(19.66, 20.26) controlPoint2: CGPointMake(18.57, 21.34)];
    [bezier11Path addCurveToPoint: CGPointMake(21, 25.08) controlPoint1: CGPointMake(18.57, 24) controlPoint2: CGPointMake(19.66, 25.08)];
    [bezier11Path addLineToPoint: CGPointMake(21, 25.08)];
    [bezier11Path closePath];
    bezier11Path.usesEvenOddFillRule = YES;

    [priceElementsColor setFill];
    [bezier11Path fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(36, 6, 72, 21);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HelveticaNeue" size: 18], NSForegroundColorAttributeName: priceElementsColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [priceString boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [priceString drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawRatingTagWithRatingSortActive: (BOOL)ratingSortActive rating: (CGFloat)rating
{
    //// Color Declarations
    UIColor* white = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* clear = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];

    //// Variable Declarations
    UIColor* ratingStar1Color = ratingSortActive ? (rating >= 1 ? StyleKit.red : clear) : (rating >= 1 ? white : clear);
    UIColor* ratingStar2Color = ratingSortActive ? (rating >= 2 ? StyleKit.red : clear) : (rating >= 2 ? white : clear);
    UIColor* ratingStar3Color = ratingSortActive ? (rating >= 3 ? StyleKit.red : clear) : (rating >= 3 ? white : clear);
    UIColor* ratingStar4Color = ratingSortActive ? (rating >= 4 ? StyleKit.red : clear) : (rating >= 4 ? white : clear);
    UIColor* ratingStar5Color = ratingSortActive ? (rating >= 5 ? StyleKit.red : clear) : (rating >= 5 ? white : clear);

    //// star1 Drawing
    UIBezierPath* star1Path = [UIBezierPath bezierPath];
    [star1Path moveToPoint: CGPointMake(17.36, 13.64)];
    [star1Path addLineToPoint: CGPointMake(25, 13.64)];
    [star1Path addLineToPoint: CGPointMake(18.82, 18.36)];
    [star1Path addLineToPoint: CGPointMake(21.18, 26)];
    [star1Path addLineToPoint: CGPointMake(15, 21.28)];
    [star1Path addLineToPoint: CGPointMake(8.82, 26)];
    [star1Path addLineToPoint: CGPointMake(11.18, 18.36)];
    [star1Path addLineToPoint: CGPointMake(5, 13.64)];
    [star1Path addLineToPoint: CGPointMake(12.64, 13.64)];
    [star1Path addLineToPoint: CGPointMake(15, 6)];
    [star1Path addLineToPoint: CGPointMake(17.36, 13.64)];
    [star1Path closePath];
    star1Path.usesEvenOddFillRule = YES;

    [ratingStar1Color setFill];
    [star1Path fill];


    //// star2 Drawing
    UIBezierPath* star2Path = [UIBezierPath bezierPath];
    [star2Path moveToPoint: CGPointMake(42.36, 13.64)];
    [star2Path addLineToPoint: CGPointMake(50, 13.64)];
    [star2Path addLineToPoint: CGPointMake(43.82, 18.36)];
    [star2Path addLineToPoint: CGPointMake(46.18, 26)];
    [star2Path addLineToPoint: CGPointMake(40, 21.28)];
    [star2Path addLineToPoint: CGPointMake(33.82, 26)];
    [star2Path addLineToPoint: CGPointMake(36.18, 18.36)];
    [star2Path addLineToPoint: CGPointMake(30, 13.64)];
    [star2Path addLineToPoint: CGPointMake(37.64, 13.64)];
    [star2Path addLineToPoint: CGPointMake(40, 6)];
    [star2Path addLineToPoint: CGPointMake(42.36, 13.64)];
    [star2Path closePath];
    star2Path.usesEvenOddFillRule = YES;

    [ratingStar2Color setFill];
    [star2Path fill];


    //// star3 Drawing
    UIBezierPath* star3Path = [UIBezierPath bezierPath];
    [star3Path moveToPoint: CGPointMake(67.36, 13.64)];
    [star3Path addLineToPoint: CGPointMake(75, 13.64)];
    [star3Path addLineToPoint: CGPointMake(68.82, 18.36)];
    [star3Path addLineToPoint: CGPointMake(71.18, 26)];
    [star3Path addLineToPoint: CGPointMake(65, 21.28)];
    [star3Path addLineToPoint: CGPointMake(58.82, 26)];
    [star3Path addLineToPoint: CGPointMake(61.18, 18.36)];
    [star3Path addLineToPoint: CGPointMake(55, 13.64)];
    [star3Path addLineToPoint: CGPointMake(62.64, 13.64)];
    [star3Path addLineToPoint: CGPointMake(65, 6)];
    [star3Path addLineToPoint: CGPointMake(67.36, 13.64)];
    [star3Path closePath];
    star3Path.usesEvenOddFillRule = YES;

    [ratingStar3Color setFill];
    [star3Path fill];


    //// star4 Drawing
    UIBezierPath* star4Path = [UIBezierPath bezierPath];
    [star4Path moveToPoint: CGPointMake(92.36, 13.64)];
    [star4Path addLineToPoint: CGPointMake(100, 13.64)];
    [star4Path addLineToPoint: CGPointMake(93.82, 18.36)];
    [star4Path addLineToPoint: CGPointMake(96.18, 26)];
    [star4Path addLineToPoint: CGPointMake(90, 21.28)];
    [star4Path addLineToPoint: CGPointMake(83.82, 26)];
    [star4Path addLineToPoint: CGPointMake(86.18, 18.36)];
    [star4Path addLineToPoint: CGPointMake(80, 13.64)];
    [star4Path addLineToPoint: CGPointMake(87.64, 13.64)];
    [star4Path addLineToPoint: CGPointMake(90, 6)];
    [star4Path addLineToPoint: CGPointMake(92.36, 13.64)];
    [star4Path closePath];
    star4Path.usesEvenOddFillRule = YES;

    [ratingStar4Color setFill];
    [star4Path fill];


    //// star5 Drawing
    UIBezierPath* star5Path = [UIBezierPath bezierPath];
    [star5Path moveToPoint: CGPointMake(117.36, 13.64)];
    [star5Path addLineToPoint: CGPointMake(125, 13.64)];
    [star5Path addLineToPoint: CGPointMake(118.82, 18.36)];
    [star5Path addLineToPoint: CGPointMake(121.18, 26)];
    [star5Path addLineToPoint: CGPointMake(115, 21.28)];
    [star5Path addLineToPoint: CGPointMake(108.82, 26)];
    [star5Path addLineToPoint: CGPointMake(111.18, 18.36)];
    [star5Path addLineToPoint: CGPointMake(105, 13.64)];
    [star5Path addLineToPoint: CGPointMake(112.64, 13.64)];
    [star5Path addLineToPoint: CGPointMake(115, 6)];
    [star5Path addLineToPoint: CGPointMake(117.36, 13.64)];
    [star5Path closePath];
    star5Path.usesEvenOddFillRule = YES;

    [ratingStar5Color setFill];
    [star5Path fill];
}

+ (void)drawCloseImageDialog
{
    //// Color Declarations
    UIColor* grayOverlay = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.158];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(12, 10.59)];
    [bezierPath addLineToPoint: CGPointMake(8.47, 7.06)];
    [bezierPath addCurveToPoint: CGPointMake(7.05, 7.05) controlPoint1: CGPointMake(8.08, 6.66) controlPoint2: CGPointMake(7.44, 6.66)];
    [bezierPath addCurveToPoint: CGPointMake(7.06, 8.47) controlPoint1: CGPointMake(6.66, 7.44) controlPoint2: CGPointMake(6.66, 8.08)];
    [bezierPath addLineToPoint: CGPointMake(10.59, 12)];
    [bezierPath addLineToPoint: CGPointMake(7.06, 15.53)];
    [bezierPath addCurveToPoint: CGPointMake(7.05, 16.95) controlPoint1: CGPointMake(6.66, 15.92) controlPoint2: CGPointMake(6.66, 16.56)];
    [bezierPath addCurveToPoint: CGPointMake(8.47, 16.94) controlPoint1: CGPointMake(7.44, 17.34) controlPoint2: CGPointMake(8.08, 17.34)];
    [bezierPath addLineToPoint: CGPointMake(12, 13.41)];
    [bezierPath addLineToPoint: CGPointMake(15.53, 16.94)];
    [bezierPath addCurveToPoint: CGPointMake(16.95, 16.95) controlPoint1: CGPointMake(15.92, 17.34) controlPoint2: CGPointMake(16.56, 17.34)];
    [bezierPath addCurveToPoint: CGPointMake(16.94, 15.53) controlPoint1: CGPointMake(17.34, 16.56) controlPoint2: CGPointMake(17.34, 15.92)];
    [bezierPath addLineToPoint: CGPointMake(13.41, 12)];
    [bezierPath addLineToPoint: CGPointMake(16.94, 8.47)];
    [bezierPath addCurveToPoint: CGPointMake(16.95, 7.05) controlPoint1: CGPointMake(17.34, 8.08) controlPoint2: CGPointMake(17.34, 7.44)];
    [bezierPath addCurveToPoint: CGPointMake(15.53, 7.06) controlPoint1: CGPointMake(16.56, 6.66) controlPoint2: CGPointMake(15.92, 6.66)];
    [bezierPath addLineToPoint: CGPointMake(12, 10.59)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(12, 24)];
    [bezierPath addCurveToPoint: CGPointMake(24, 12) controlPoint1: CGPointMake(18.63, 24) controlPoint2: CGPointMake(24, 18.63)];
    [bezierPath addCurveToPoint: CGPointMake(12, 0) controlPoint1: CGPointMake(24, 5.37) controlPoint2: CGPointMake(18.63, 0)];
    [bezierPath addCurveToPoint: CGPointMake(0, 12) controlPoint1: CGPointMake(5.37, 0) controlPoint2: CGPointMake(0, 5.37)];
    [bezierPath addCurveToPoint: CGPointMake(12, 24) controlPoint1: CGPointMake(0, 18.63) controlPoint2: CGPointMake(5.37, 24)];
    [bezierPath closePath];
    bezierPath.usesEvenOddFillRule = YES;

    [grayOverlay setFill];
    [bezierPath fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfDeliveries
{
    if (_imageOfDeliveries)
        return _imageOfDeliveries;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [StyleKit drawDeliveries];

    _imageOfDeliveries = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDeliveries;
}

+ (UIImage*)imageOfLocation
{
    if (_imageOfLocation)
        return _imageOfLocation;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [StyleKit drawLocation];

    _imageOfLocation = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLocation;
}

+ (UIImage*)imageOfListView
{
    if (_imageOfListView)
        return _imageOfListView;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [StyleKit drawListView];

    _imageOfListView = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfListView;
}

+ (UIImage*)imageOfMapPlaceholder
{
    if (_imageOfMapPlaceholder)
        return _imageOfMapPlaceholder;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawMapPlaceholder];

    _imageOfMapPlaceholder = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMapPlaceholder;
}

+ (UIImage*)imageOfCloseImageDialog
{
    if (_imageOfCloseImageDialog)
        return _imageOfCloseImageDialog;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 24), NO, 0.0f);
    [StyleKit drawCloseImageDialog];

    _imageOfCloseImageDialog = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCloseImageDialog;
}

#pragma mark Customization Infrastructure

- (void)setDeliveriesTargets: (NSArray*)deliveriesTargets
{
    _deliveriesTargets = deliveriesTargets;

    for (id target in self.deliveriesTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfDeliveries];
}

- (void)setLocationTargets: (NSArray*)locationTargets
{
    _locationTargets = locationTargets;

    for (id target in self.locationTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfLocation];
}

- (void)setListViewTargets: (NSArray*)listViewTargets
{
    _listViewTargets = listViewTargets;

    for (id target in self.listViewTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfListView];
}

- (void)setMapPlaceholderTargets: (NSArray*)mapPlaceholderTargets
{
    _mapPlaceholderTargets = mapPlaceholderTargets;

    for (id target in self.mapPlaceholderTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfMapPlaceholder];
}

- (void)setCloseImageDialogTargets: (NSArray*)closeImageDialogTargets
{
    _closeImageDialogTargets = closeImageDialogTargets;

    for (id target in self.closeImageDialogTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfCloseImageDialog];
}


@end
