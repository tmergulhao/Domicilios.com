//
//  StyleKit.m
//  Domicilios.com
//
//  Created by Tiago Mergulhão on 09/10/16.
//  Copyright (c) 2016 Tiago Mergulhão. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static UIColor* _red = nil;

static UIImage* _imageOfDeliveries = nil;
static UIImage* _imageOfLocation = nil;
static UIImage* _imageOfListView = nil;
static UIImage* _imageOfDashedBackground = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _red = [UIColor colorWithRed: 0.812 green: 0.008 blue: 0.008 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)red { return _red; }

#pragma mark Drawing Methods

+ (void)drawDeliveries
{

    //// path0_fill Drawing
    UIBezierPath* path0_fillPath = [UIBezierPath bezierPath];
    [path0_fillPath moveToPoint: CGPointMake(16.97, 6)];
    [path0_fillPath addCurveToPoint: CGPointMake(17, 5.66) controlPoint1: CGPointMake(16.99, 5.89) controlPoint2: CGPointMake(17, 5.77)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 3) controlPoint1: CGPointMake(17, 4.19) controlPoint2: CGPointMake(15.66, 3)];
    [path0_fillPath addCurveToPoint: CGPointMake(11, 5.66) controlPoint1: CGPointMake(12.34, 3) controlPoint2: CGPointMake(11, 4.19)];
    [path0_fillPath addCurveToPoint: CGPointMake(11.02, 6) controlPoint1: CGPointMake(11, 5.77) controlPoint2: CGPointMake(11.01, 5.89)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 5.85) controlPoint1: CGPointMake(11.94, 5.9) controlPoint2: CGPointMake(12.94, 5.85)];
    [path0_fillPath addCurveToPoint: CGPointMake(16.97, 6) controlPoint1: CGPointMake(15.06, 5.85) controlPoint2: CGPointMake(16.05, 5.9)];
    [path0_fillPath closePath];
    [path0_fillPath moveToPoint: CGPointMake(24.24, 18.85)];
    [path0_fillPath addCurveToPoint: CGPointMake(25.96, 21.8) controlPoint1: CGPointMake(26.43, 20.22) controlPoint2: CGPointMake(25.96, 21.8)];
    [path0_fillPath addCurveToPoint: CGPointMake(13.4, 24) controlPoint1: CGPointMake(25.96, 21.8) controlPoint2: CGPointMake(21.02, 24)];
    [path0_fillPath addCurveToPoint: CGPointMake(2.04, 21.8) controlPoint1: CGPointMake(5.79, 24) controlPoint2: CGPointMake(2.04, 21.8)];
    [path0_fillPath addCurveToPoint: CGPointMake(3.76, 18.85) controlPoint1: CGPointMake(2.04, 21.8) controlPoint2: CGPointMake(1.57, 20.22)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 21.03) controlPoint1: CGPointMake(6.57, 20.21) controlPoint2: CGPointMake(10.13, 21.03)];
    [path0_fillPath addCurveToPoint: CGPointMake(24.24, 18.85) controlPoint1: CGPointMake(17.87, 21.03) controlPoint2: CGPointMake(21.43, 20.21)];
    [path0_fillPath closePath];
    [path0_fillPath moveToPoint: CGPointMake(23.45, 16.18)];
    [path0_fillPath addCurveToPoint: CGPointMake(23.45, 16.51) controlPoint1: CGPointMake(23.45, 16.29) controlPoint2: CGPointMake(23.45, 16.4)];
    [path0_fillPath addCurveToPoint: CGPointMake(13.89, 18.73) controlPoint1: CGPointMake(21.01, 17.88) controlPoint2: CGPointMake(17.63, 18.73)];
    [path0_fillPath addCurveToPoint: CGPointMake(4.56, 16.62) controlPoint1: CGPointMake(10.27, 18.73) controlPoint2: CGPointMake(6.97, 17.93)];
    [path0_fillPath addCurveToPoint: CGPointMake(4.55, 16.18) controlPoint1: CGPointMake(4.55, 16.48) controlPoint2: CGPointMake(4.55, 16.33)];
    [path0_fillPath addCurveToPoint: CGPointMake(14, 6.84) controlPoint1: CGPointMake(4.55, 11.02) controlPoint2: CGPointMake(8.78, 6.84)];
    [path0_fillPath addCurveToPoint: CGPointMake(23.45, 16.18) controlPoint1: CGPointMake(19.22, 6.84) controlPoint2: CGPointMake(23.45, 11.02)];
    [path0_fillPath closePath];
    path0_fillPath.miterLimit = 4;

    path0_fillPath.usesEvenOddFillRule = YES;

    [UIColor.whiteColor setFill];
    [path0_fillPath fill];
}

+ (void)drawLocation
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(13, 25)];
    [bezierPath addLineToPoint: CGPointMake(13, 14)];
    [bezierPath addLineToPoint: CGPointMake(2, 14)];
    [bezierPath addLineToPoint: CGPointMake(24, 3)];
    [bezierPath addLineToPoint: CGPointMake(13, 25)];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
}

+ (void)drawListView
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(4, 7, 3, 3)];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(4, 13, 3, 3)];
    [UIColor.whiteColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(4, 19, 3, 3)];
    [UIColor.whiteColor setFill];
    [rectangle3Path fill];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 8, 15, 1)];
    [UIColor.whiteColor setFill];
    [rectangle4Path fill];


    //// Rectangle 5 Drawing
    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 14, 15, 1)];
    [UIColor.whiteColor setFill];
    [rectangle5Path fill];


    //// Rectangle 6 Drawing
    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 20, 15, 1)];
    [UIColor.whiteColor setFill];
    [rectangle6Path fill];
}

+ (void)drawDashedBackground
{

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(0.5, 91.5)];
    [bezier2Path addLineToPoint: CGPointMake(44.5, 91.5)];
    bezier2Path.lineCapStyle = kCGLineCapSquare;

    [UIColor.whiteColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(0.5, 45.5)];
    [bezier3Path addLineToPoint: CGPointMake(44.5, 45.5)];
    bezier3Path.lineCapStyle = kCGLineCapSquare;

    [UIColor.whiteColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];
}

#pragma mark Generated Images

+ (UIImage*)imageOfDeliveries
{
    if (_imageOfDeliveries)
        return _imageOfDeliveries;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [StyleKit drawDeliveries];

    _imageOfDeliveries = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDeliveries;
}

+ (UIImage*)imageOfLocation
{
    if (_imageOfLocation)
        return _imageOfLocation;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [StyleKit drawLocation];

    _imageOfLocation = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLocation;
}

+ (UIImage*)imageOfListView
{
    if (_imageOfListView)
        return _imageOfListView;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [StyleKit drawListView];

    _imageOfListView = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfListView;
}

+ (UIImage*)imageOfDashedBackground
{
    if (_imageOfDashedBackground)
        return _imageOfDashedBackground;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(45, 137), NO, 0.0f);
    [StyleKit drawDashedBackground];

    _imageOfDashedBackground = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDashedBackground;
}

#pragma mark Customization Infrastructure

- (void)setDeliveriesTargets: (NSArray*)deliveriesTargets
{
    _deliveriesTargets = deliveriesTargets;

    for (id target in self.deliveriesTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfDeliveries];
}

- (void)setLocationTargets: (NSArray*)locationTargets
{
    _locationTargets = locationTargets;

    for (id target in self.locationTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfLocation];
}

- (void)setListViewTargets: (NSArray*)listViewTargets
{
    _listViewTargets = listViewTargets;

    for (id target in self.listViewTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfListView];
}

- (void)setDashedBackgroundTargets: (NSArray*)dashedBackgroundTargets
{
    _dashedBackgroundTargets = dashedBackgroundTargets;

    for (id target in self.dashedBackgroundTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfDashedBackground];
}


@end
